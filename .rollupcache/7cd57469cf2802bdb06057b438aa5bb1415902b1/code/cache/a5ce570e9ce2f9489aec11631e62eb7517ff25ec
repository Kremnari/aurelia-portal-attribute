{"code":"import * as tslib_1 from \"tslib\";\r\nimport { customAttribute, templateController, ViewSlot, BoundViewFactory, bindable } from 'aurelia-templating';\r\nimport { PLATFORM } from 'aurelia-pal';\r\nvar document = PLATFORM.global.document;\r\nvar Portal = /** @class */ (function () {\r\n    function Portal(viewFactory, originalViewslot) {\r\n        this.viewFactory = viewFactory;\r\n        this.originalViewslot = originalViewslot;\r\n        this.strict = false;\r\n        this.initialRender = false;\r\n        this.currentTarget = unset;\r\n    }\r\n    Portal_1 = Portal;\r\n    Portal.getTarget = function (target, context) {\r\n        if (target) {\r\n            if (typeof target === 'string') {\r\n                var queryContext = document;\r\n                if (context) {\r\n                    if (typeof context === 'string') {\r\n                        context = document.querySelector(context);\r\n                    }\r\n                    if (context instanceof Element) {\r\n                        queryContext = context;\r\n                    }\r\n                }\r\n                target = queryContext.querySelector(target);\r\n            }\r\n            if (target instanceof Element) {\r\n                return target;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    Portal.prototype.bind = function (bindingContext, overrideContext) {\r\n        if (!this.callbackContext) {\r\n            this.callbackContext = bindingContext;\r\n        }\r\n        var view = this.view;\r\n        if (!view) {\r\n            view = this.view = this.viewFactory.create();\r\n        }\r\n        var shouldInitRender = this.initialRender;\r\n        if (shouldInitRender) {\r\n            this.originalViewslot.add(view);\r\n        }\r\n        view.bind(bindingContext, overrideContext);\r\n        if (shouldInitRender) {\r\n            this.originalViewslot.remove(view);\r\n        }\r\n    };\r\n    Portal.prototype.attached = function () {\r\n        this.isAttached = true;\r\n        return this.render();\r\n    };\r\n    Portal.prototype.detached = function () {\r\n        this.isAttached = false;\r\n        if (this.viewSlot) {\r\n            this.viewSlot.detached();\r\n        }\r\n    };\r\n    Portal.prototype.unbind = function () {\r\n        if (this.viewSlot) {\r\n            this.viewSlot.remove(this.view);\r\n            this.viewSlot = null;\r\n        }\r\n        this.view.unbind();\r\n        this.callbackContext = null;\r\n    };\r\n    Portal.prototype.getTarget = function () {\r\n        var target = Portal_1.getTarget(this.target, this.renderContext);\r\n        if (target === null) {\r\n            if (this.strict) {\r\n                throw new Error('Render target not found.');\r\n            }\r\n            else {\r\n                target = document.body;\r\n            }\r\n        }\r\n        return target;\r\n    };\r\n    Portal.prototype.render = function () {\r\n        var _this = this;\r\n        var oldTarget = this.currentTarget;\r\n        var view = this.view;\r\n        var target = this.currentTarget = this.getTarget();\r\n        var oldViewSlot = this.viewSlot;\r\n        if (oldTarget === target && oldViewSlot) {\r\n            return;\r\n        }\r\n        var addAction = function () {\r\n            if (_this.isAttached) {\r\n                return Promise.resolve(typeof _this.activating === 'function'\r\n                    ? _this.activating.call(_this.callbackContext, target, view)\r\n                    : null).then(function () {\r\n                    if (target === _this.currentTarget || oldTarget === unset) {\r\n                        var viewSlot = _this.viewSlot = new ViewSlot(target, true);\r\n                        viewSlot.attached();\r\n                        viewSlot.add(view);\r\n                        _this.removed = false;\r\n                    }\r\n                    return Promise.resolve().then(function () {\r\n                        typeof _this.activated === 'function'\r\n                            ? _this.activated.call(_this.callbackContext, target, view)\r\n                            : null;\r\n                    });\r\n                });\r\n            }\r\n            return Promise.resolve(null);\r\n        };\r\n        if (oldViewSlot) {\r\n            return Promise.resolve(typeof this.deactivating === 'function'\r\n                ? this.deactivating.call(this.callbackContext, oldTarget, view)\r\n                : null).then(function () {\r\n                if (typeof _this.deactivated === 'function') {\r\n                    _this.deactivated.call(_this.callbackContext, oldTarget, view);\r\n                }\r\n                _this.viewSlot = null;\r\n                if (!_this.removed) {\r\n                    oldViewSlot.remove(view);\r\n                    _this.removed = true;\r\n                }\r\n                return addAction();\r\n            });\r\n        }\r\n        return Promise.resolve(addAction());\r\n    };\r\n    Portal.prototype.targetChanged = function () {\r\n        return this.render();\r\n    };\r\n    /**\r\n     * Only needs the BoundViewFactory as a custom viewslot will be used\r\n     */\r\n    Portal.inject = [BoundViewFactory, ViewSlot];\r\n    tslib_1.__decorate([\r\n        bindable({\r\n            primaryProperty: true,\r\n            defaultValue: null\r\n        })\r\n    ], Portal.prototype, \"target\", void 0);\r\n    tslib_1.__decorate([\r\n        bindable({ changeHandler: 'targetChanged' })\r\n    ], Portal.prototype, \"renderContext\", void 0);\r\n    tslib_1.__decorate([\r\n        bindable()\r\n    ], Portal.prototype, \"strict\", void 0);\r\n    tslib_1.__decorate([\r\n        bindable()\r\n    ], Portal.prototype, \"initialRender\", void 0);\r\n    tslib_1.__decorate([\r\n        bindable()\r\n    ], Portal.prototype, \"deactivating\", void 0);\r\n    tslib_1.__decorate([\r\n        bindable()\r\n    ], Portal.prototype, \"activating\", void 0);\r\n    tslib_1.__decorate([\r\n        bindable()\r\n    ], Portal.prototype, \"activated\", void 0);\r\n    tslib_1.__decorate([\r\n        bindable()\r\n    ], Portal.prototype, \"deactivated\", void 0);\r\n    tslib_1.__decorate([\r\n        bindable()\r\n    ], Portal.prototype, \"callbackContext\", void 0);\r\n    Portal = Portal_1 = tslib_1.__decorate([\r\n        templateController(),\r\n        customAttribute('portal')\r\n    ], Portal);\r\n    return Portal;\r\n    var Portal_1;\r\n}());\r\nexport { Portal };\r\nvar unset = {};\r\n"}
